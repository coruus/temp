#include "print-impl.h"

#include "blake2/blake2.h"

#include <assert.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#define GKNLEN   64
#define KEYLEN   40
#define BKNLEN   40
#define TAGLEN   64
#define BLOCKLEN 65536

typedef uint32_t v8u __attribute__((ext_vector_type(8)));

static const uint8_t salsa_sigma[16] = "expand 32-byte k";

#define rotate(X, S) \
  (((X) << S) ^ ((X) >> (32 - S)))

#define memcompare memcmp

// The HSalsa core
static inline void hsalsa_core(v8u* x) {
/*% for i in range(20//2) */
   x[4] ^= rotate( x[0]+x[12],  7);
   x[8] ^= rotate( x[4]+ x[0],  9);
  x[12] ^= rotate( x[8]+ x[4], 13);
   x[0] ^= rotate(x[12]+ x[8], 18);

   x[9] ^= rotate( x[5]+ x[1],  7);
  x[13] ^= rotate( x[9]+ x[5],  9);
   x[1] ^= rotate(x[13]+ x[9], 13);
   x[5] ^= rotate( x[1]+x[13], 18);

  x[14] ^= rotate(x[10]+ x[6],  7);
   x[2] ^= rotate(x[14]+x[10],  9);
   x[6] ^= rotate( x[2]+x[14], 13);
  x[10] ^= rotate( x[6]+ x[2], 18);

   x[3] ^= rotate(x[15]+x[11],  7);
   x[7] ^= rotate( x[3]+x[15],  9);
  x[11] ^= rotate( x[7]+ x[3], 13);
  x[15] ^= rotate(x[11]+ x[7], 18);

   x[1] ^= rotate( x[0]+ x[3],  7);
   x[2] ^= rotate( x[1]+ x[0],  9);
   x[3] ^= rotate( x[2]+ x[1], 13);
   x[0] ^= rotate( x[3]+ x[2], 18);

   x[6] ^= rotate( x[5]+ x[4],  7);
   x[7] ^= rotate( x[6]+ x[5],  9);
   x[4] ^= rotate( x[7]+ x[6], 13);
   x[5] ^= rotate( x[4]+ x[7], 18);

  x[11] ^= rotate(x[10]+ x[9],  7);
   x[8] ^= rotate(x[11]+x[10],  9);
   x[9] ^= rotate( x[8]+x[11], 13);
  x[10] ^= rotate( x[9]+ x[8], 18);

  x[12] ^= rotate(x[15]+x[14],  7);
  x[13] ^= rotate(x[12]+x[15],  9);
  x[14] ^= rotate(x[13]+x[12], 13);
  x[15] ^= rotate(x[14]+x[13], 18);
/*% endfor */
}

// Helper macros for salsavi_load
#define load(X) \
  (v8u)(*((uint32_t*)(X)))
#define H(x) ((uint32_t)(((x) >> 32) & 0xffffffff))
#define L(x) ((uint32_t)((x) & 0xffffffff))

static inline void salsavi_load(v8u* x,
                                const uint8_t* k,
                                const uint8_t* n,
                                const uint64_t c) {
  x[0]  = load(salsa_sigma + 0);
  x[5]  = load(salsa_sigma + 4);
  x[10] = load(salsa_sigma + 8);
  x[15] = load(salsa_sigma + 12);

  x[1]  = load(k + 0);
  x[2]  = load(k + 4);
  x[3]  = load(k + 8);
  x[4]  = load(k + 12);

  x[11] = load(k + 16);
  x[12] = load(k + 20);
  x[13] = load(k + 24);
  x[14] = load(k + 28);

  x[6]  = load(n + 0);
  x[7]  = load(n + 4);
//  x[8]  = load(n + 8);
  x[8]  = (v8u){H(c + 0), H(c + 1), H(c + 2), H(c + 3),
                H(c + 4), H(c + 5), H(c + 6), H(c + 7)};
  x[9]  = (v8u){L(c + 0), L(c + 1), L(c + 2), L(c + 3),
                L(c + 4), L(c + 5), L(c + 6), L(c + 7)};
//  v8u x9  = load(in + 12);
}
#undef load
#undef H
#undef L

static inline void salsavi8(v8u* io,
                            const uint8_t* kn,
                            const uint64_t counter) {
  v8u in[16];
  v8u x[16];
  salsavi_load(in, kn, kn+32, counter);
/*% for i in range(16) */
  x[`i`] = in[`i`];
/*% endfor */
  hsalsa_core(x);
/*% for i in range(16) */
  x[`i`] += in[`i`];
/*% endfor */
/*% for i in range(16) */
  io[`i`] ^= x[`i`];
/*% endfor */
}

static inline void vi8_reorder(void* _out, v8u* in) {
  uint32_t* out = (uint32_t*)_out;
/*% for v in range(8) */
/*% for i in range(16) */
  out[`v`*16 + `i`] = in[`i`][`v`];
/*% endfor */
/*% endfor */
}

// TODO(dlg): Test against Salsa ref.

static inline void salsavi8x128(void* _io, const uint8_t* kn) {
  v8u* io = (v8u*)_io;
  uint64_t counter = 0;
/*% for _ in range(128) */
  salsavi8(io, kn, counter); io += 16; counter += 8;
/*% endfor */
}

static inline void hash_block(uint8_t* tag,
                              const void* in,
                              const uint8_t* key) {
  blake2bp_state s;
  blake2bp_init_key(&s, 64, key, KEYLEN);
  blake2bp_update(&s, in, BLOCKLEN);
  blake2bp_final(&s, tag, TAGLEN);
}

static inline void block_encrypt(uint8_t* tag,
                                 void* _io,
                                 const uint8_t* key) {
  salsavi8x128(_io, key);
  hash_block(tag, _io, key);
}

static inline int block_decrypt(void* out,
                                const uint8_t* tag,
                                const void* in,
                                const uint8_t* key) {
  uint8_t ptag[TAGLEN] = {0};
  hash_block(ptag, in, key);
  int err = memcompare(ptag, tag, TAGLEN);
  if (err != 0) { return err; }
  memcpy(out, in, BLOCKLEN);
  salsavi8x128(out, key);
  return 0;
}

/** Derive the 40B block key.
 *
 * @param key[out]     The derived key, KEYLEN bytes.
 * @param gkn[in]      The global key+nonce, GKNLEN bytes.
 * @param blocknum[in] The block number.
 * @param blockgen[in] The block generation.
 */
static inline void block_kdf(uint8_t* key,
                             const uint8_t* gkn,
                             const uint64_t blocknum,
                             const uint64_t blockgen) {
  blake2bp_state s;
  blake2bp_init_key(&s, 64, gkn, GKNLEN);
  blake2bp_update(&s, (uint8_t*)&blockgen, 8);
  blake2bp_update(&s, (uint8_t*)&blocknum, 8);
  blake2bp_final(&s, key, KEYLEN);
}
